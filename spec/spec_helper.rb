# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Load simplecov and disable it if running a profile or benchmark - this comes first
require "simplecov"
SimpleCov.start "rails" do
  add_filter "/spec/"
  add_filter "/config/"
  add_filter "/lib/"
  add_filter "/vendor/"
  add_filter "/bin/"
end

# Format results for lcov
require "simplecov-lcov"
SimpleCov::Formatter::LcovFormatter.config do |c|
  c.report_with_single_file = true
  c.single_report_path = "coverage/lcov/ReflexAgent.lcov"
end

# Use a multi-formatter without the JSONFormatter which appears to be missing
SimpleCov.formatter = SimpleCov::Formatter::MultiFormatter.new([
                                                                 SimpleCov::Formatter::HTMLFormatter,
                                                                 SimpleCov::Formatter::LcovFormatter
                                                                 # Don't include console formatter to avoid terminal output
                                                               ])

# Load testing pyramid configuration
require_relative "support/testing_pyramid"

# Enable autoloading of app/ modules in the test environment
require_relative "../app/ports/ingestion_port"
require_relative "../app/ports/storage_port"
require_relative "../app/ports/cache_port"
require_relative "../app/ports/notification_port"
require_relative "../app/ports/queue_port"
require_relative "../app/ports/dashboard_port"

# Domain models
require_relative "../app/core/domain/event"
require_relative "../app/core/domain/metric"
require_relative "../app/core/domain/alert"
require_relative "../app/core/domain/actuator"
require_relative "../app/core/domain/reflexive_agent"
require_relative "../app/core/domain/metric_classifier"

# Use cases
require_relative "../app/core/use_cases/process_event"
require_relative "../app/core/use_cases/calculate_metrics"
require_relative "../app/core/use_cases/detect_anomalies"
require_relative "../app/core/use_cases/send_notification"
require_relative "../app/core/use_cases/find_event"
require_relative "../app/core/use_cases/find_metric"
require_relative "../app/core/use_cases/find_alert"
require_relative "../app/core/use_cases/list_metrics"
require_relative "../app/core/use_cases/list_alerts"

# Adapters - comment out problematic repositories for now
require_relative "../app/adapters/repositories/event_repository"
require_relative "../app/adapters/repositories/metric_repository"
require_relative "../app/adapters/repositories/alert_repository"
require_relative "../app/adapters/queuing/sidekiq_queue_adapter"

# Enable autoloading of core/use_cases
require_relative "../app/core/use_cases/actuator_controller"
require_relative "../app/core/use_cases/process_event"
require_relative "../app/core/use_cases/calculate_metrics"
require_relative "../app/core/use_cases/detect_anomalies"
require_relative "../app/core/use_cases/send_notification"
require_relative "../app/core/use_cases/find_event"
require_relative "../app/core/use_cases/find_metric"
require_relative "../app/core/use_cases/find_alert"

# Factory
require_relative "../app/core/use_case_factory"

require "securerandom"

# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # Configure examples with :git_metrics_isolation tag to always be isolated
  config.around(:each, :git_metrics_isolation) do |example|
    # Ensure tests with this tag run in isolation by cleaning up mocks before and after
    RSpec::Mocks.setup
    example.run
    RSpec::Mocks.verify
    RSpec::Mocks.teardown
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  config.example_status_persistence_file_path = ".rspec_status"

  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # Include integration test behaviors to properly handle request specs
  config.include RSpec::Rails::RequestExampleGroup, type: :request if defined?(RSpec::Rails)

  # Add full URL helpers to all specs that need to generate URLs
  config.before(:each, type: :request) do
    default_url_options[:host] = "localhost:3000"
  end
end

# Load Rails and disable simplecov if needed
require File.expand_path("../config/environment", __dir__)
